{"version":3,"sources":["assets/images/loadingRicksHead.gif","assets/images/rickDetailLoading.gif","assets/images/errorRick.gif","assets/images/home.png","assets/images/hologramRick.jpeg","assets/images/characters.jpeg","assets/images/planeLocation.jpeg","components/SearchInput.tsx","utils/indicators.tsx","utils/componentSetting.ts","store/graphql/character/queries.ts","views/CharacterList.tsx","views/CharacterDetail.tsx","components/CharactersTable.tsx","store/graphql/episode/queries.ts","views/EpisodeDetail.tsx","views/EpisodeList.tsx","store/graphql/location/queries.ts","views/LocationList.tsx","views/LocationDetail.tsx","components/Navbar.tsx","views/Home.tsx","components/Breadcrumbs.tsx","App.tsx","reportWebVitals.ts","client.ts","index.tsx"],"names":["SearchInput","error","onSearch","align","style","textAlign","span","className","paddingTop","marginRight","color","Search","placeholder","allowClear","width","ricksHeadIndicator","height","src","require","default","alt","rickDancingIndicator","itemErrorIndicator","getPaginationSettings","currentPage","handleOnChange","totalPages","current","onChange","defaultPageSize","total","showSizeChanger","getCharacterDetail","gql","getCharacterList","CharacterList","useState","setCurrentPage","characters","setCharacters","filterName","setFilterName","totalPagesNumber","setTotalPagesNumber","useQuery","variables","page","name","loading","apiData","data","useEffect","results","info","count","columns","title","dataIndex","key","render","text","record","to","id","input","rowKey","size","indicator","pagination","dataSource","CharacterDetail","character","setCharacter","useParams","sm","md","lg","image","Item","label","status","species","gender","location","origin","type","marginTop","header","bordered","episode","renderItem","item","CharactersTable","sortString","a","b","localeCompare","sorter","compare","multiple","filters","value","onFilter","indexOf","getEpisodeDetail","getEpisodeList","EpisodeDetail","setEpisode","air_date","EpisodeList","episodes","setEpisodes","console","log","getLocationDetail","getLocationList","LocationList","locations","setLocations","LocationDetail","setLocation","dimension","residents","Navbar","useLocation","setItem","path","pathname","includes","theme","mode","fontSize","selectedKeys","Home","history","useHistory","handleCardClick","target","push","marginBottom","onClick","hoverable","cover","Meta","Breadcrumbs","routes","route","find","regex","RegExp","fontWeight","test","Header","Layout","Footer","Content","App","basename","process","padding","margin","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b38ccd07.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loadingRicksHead.00580c28.gif\";","export default __webpack_public_path__ + \"static/media/rickDetailLoading.7d87ce66.gif\";","export default __webpack_public_path__ + \"static/media/errorRick.f6c06f6e.gif\";","export default __webpack_public_path__ + \"static/media/home.9449e04d.png\";","export default __webpack_public_path__ + \"static/media/hologramRick.50c322a5.jpeg\";","export default __webpack_public_path__ + \"static/media/characters.969b18e1.jpeg\";","export default __webpack_public_path__ + \"static/media/planeLocation.cd69f375.jpeg\";","import React from 'react';\nimport {Col, Input, Row} from \"antd\";\nimport {ApolloError} from \"@apollo/client\";\n\nexport default function SearchInput({error, onSearch, align=\"right\"}: { error: ApolloError | undefined, onSearch:(value:string) => void, align?: any}) {\n    return (\n        <>\n            <Row style={{textAlign: align}}><Col span={24}>{error &&\n            <span className=\"test-error\" style={{paddingTop: \"2px\", marginRight: \"30px\", color: \"red\"}}>No item found</span>}<Input.Search\n                placeholder=\"search by name\" allowClear onSearch={onSearch} style={{width: 200}}/></Col></Row>\n        </>\n    )\n}\n\n","import React from \"react\";\nimport {Col, Row} from \"antd\";\n\nexport const ricksHeadIndicator = <img style={{ width: 100, height: 100}} className=\"test-loading\" src={require('../assets/images/loadingRicksHead.gif').default} alt={\"Ricks indicator\"}/>\nexport const rickDancingIndicator = <Row className=\"text-center test-loading\"><Col span={24}><img src={require('../assets/images/rickDetailLoading.gif').default} alt=\"Rick dancing\"/></Col></Row>\nexport const itemErrorIndicator = <Row className=\"text-center test-error\"><Col span={24}><h1>Item with this ID does not exist!</h1></Col><Col span={24}><img src={require('../assets/images/errorRick.gif').default} alt=\"Drinking Rick\"/></Col></Row>\n\n","\nexport function getPaginationSettings(currentPage: number, handleOnChange: (page:number) => void, totalPages:number){\n    return {current: currentPage, onChange: handleOnChange, defaultPageSize:20, total: totalPages, showSizeChanger:false}\n}","import {gql} from \"@apollo/client\";\n\nexport const getCharacterDetail = gql`\n    query CharacterDetail($id: ID!){\n        character(id:$id){\n            id\n            name\n            status\n            species\n            type\n            gender\n            image\n            origin{\n                id\n                name\n            }\n            location{\n                id\n                name\n            }\n            episode{\n                id\n                name\n            }\n        }\n    }\n`\n\nexport const getCharacterList = gql`\n    query CharacterList($page: Int, $name:String){\n        characters(page: $page, filter: { name: $name }) {\n            info {\n                count\n            }\n            results {\n                id\n                name\n                status\n                species\n            }\n        }\n    }\n`","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Table} from 'antd'\nimport SearchInput from \"../components/SearchInput\"\nimport { ricksHeadIndicator} from \"../utils/indicators\";\nimport {getPaginationSettings} from \"../utils/componentSetting\"\nimport {Link} from 'react-router-dom'\nimport {ICharacterListData, IListQueryVars} from \"../store/graphql/interfaces\";\nimport {ICharacter} from \"../store/model/character/interfaces\";\nimport {getCharacterList} from \"../store/graphql/character/queries\";\n\n\n\n\n\n\nfunction CharacterList() {\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [characters, setCharacters] = useState<ICharacter[]>([]);\n    const [filterName, setFilterName] = useState<string>(\"\")\n    const [totalPagesNumber, setTotalPagesNumber] = useState<number>(0)\n\n    const {loading, error, data: apiData} = useQuery<ICharacterListData, IListQueryVars>(getCharacterList, {\n        variables: {page: currentPage, name: filterName}\n    });\n\n    useEffect(() => {\n        if (apiData?.characters) {\n            setCharacters(apiData.characters.results);\n            setTotalPagesNumber(apiData.characters.info.count)\n        }\n\n    }, [apiData]);\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'id',\n            render: (text: string, record: ICharacter) => <Link className=\"test-success\" to={\"/character/\" + record.id}>{record.name}</Link>,\n        },\n        {\n            title: 'Species',\n            dataIndex: 'species',\n            key: \"id\"\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n        }\n    ];\n\n    function handleSearch(input:string):void{\n        setFilterName(input)\n    }\n\n    return (\n        <>\n            <h1 className=\"headings-2\">Characters</h1>\n            <SearchInput onSearch={handleSearch} error={error}/>\n            <Table rowKey=\"id\" size={\"small\"} loading={!error && loading && {indicator: ricksHeadIndicator}}\n                   pagination={getPaginationSettings(currentPage, (page: number) => setCurrentPage(page), totalPagesNumber)}\n                   dataSource={characters} columns={columns}/>;\n        </>\n    )\n\n}\n\nexport default CharacterList;\n","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Descriptions, Col, Row, List, Divider} from 'antd'\nimport {useParams} from \"react-router-dom\"\nimport {Link} from \"react-router-dom\"\nimport {itemErrorIndicator, rickDancingIndicator} from \"../utils/indicators\";\nimport {ICharacter} from \"../store/model/character/interfaces\";\nimport {ICharacterData, IDetailQueryVars} from \"../store/graphql/interfaces\";\nimport {IEpisode} from \"../store/model/episode/interfaces\";\nimport {getCharacterDetail} from \"../store/graphql/character/queries\";\n\n\nexport default function CharacterDetail() {\n    const [character, setCharacter] = useState<ICharacter>();\n    const {id} = useParams<{ id: string }>()\n\n    const {loading, error, data: apiData} = useQuery<ICharacterData, IDetailQueryVars>(getCharacterDetail, {\n        variables: {id: id}\n    });\n\n    useEffect(() => {\n        if (apiData?.character) {\n            setCharacter(apiData.character);\n        }\n\n    }, [apiData]);\n    if (error) return itemErrorIndicator\n\n    if (loading || !character) return rickDancingIndicator\n\n    return (\n        <>\n            <h1 className=\"headings-2 text-center\">Character</h1>\n            <Divider/>\n            <Row>\n                <Col sm={24} md={8} lg={12} style={{textAlign: \"center\"}}>\n                    <img src={character.image} alt=\"Character\" height=\"300\" width=\"300\"/>\n                </Col>\n                <Col sm={24} md={15} lg={12}>\n                    <Descriptions className=\"descriptionTitle test-success\" title={character.name}>\n                        <Descriptions.Item label=\"Status\">{character.status}</Descriptions.Item>\n                        <Descriptions.Item label=\"Species\">{character.species}</Descriptions.Item>\n                        <Descriptions.Item label=\"Gender\">{character.gender}</Descriptions.Item>\n                        <Descriptions.Item label=\"Location\" span={2}>\n                            {character.location.id ?\n                                <Link to={\"/location/\" + character.location.id}>{character.location.name}</Link> :\n                                <span>{character.location.name}</span>}\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Origin\" span={1}>\n                            {character.origin.id ?\n                                <Link to={\"/location/\" + character.origin.id}>{character.origin.name}</Link> :\n                                <span>{character.origin.name}</span>}\n                        </Descriptions.Item>\n                        {character.type && <Descriptions.Item label=\"Type\">{character.type}</Descriptions.Item>}\n                    </Descriptions>\n                    <List\n                        style={{marginTop: \"40px\"}}\n                        header={<div><strong>In Episodes</strong></div>}\n                        bordered\n                        dataSource={character.episode}\n                        pagination={{defaultPageSize: 5}}\n                        renderItem={(item: IEpisode) => (\n                            <List.Item>\n                                <Link to={\"/episode/\" + item.id}>{item.name}</Link>\n                            </List.Item>\n                        )}\n                    />\n                </Col>\n            </Row>\n        </>\n    )\n\n\n}\n\n","import {Link} from \"react-router-dom\"\nimport {Table} from 'antd'\nimport React from \"react\";\nimport {ColumnsType} from \"antd/es/table\";\nimport {ICharacter} from \"../store/model/character/interfaces\";\n\nexport default function CharactersTable({data, title} : {data:ICharacter[], title:string}) {\n\n    function sortString(a:string,b:string) : number{\n        return a.localeCompare(b)\n    }\n\n    const columns : ColumnsType<ICharacter>= [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            sorter: {compare: (a, b) => sortString(a.name,b.name), multiple: 1},\n            render: (text: string, record:ICharacter) => <Link to={\"/character/\" + record.id}>{record.name}</Link>,\n        },\n        {\n            title: 'Species',\n            dataIndex: 'species',\n            sorter: {compare: (a, b) => sortString(a.name,b.name), multiple: 2},\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            filters: [\n              { text: 'Dead', value: 'Dead' },\n              { text: 'unknown', value: 'unknown' },\n              { text: 'Alive', value: 'Alive' },\n            ],\n            sorter: {compare: (a, b) => sortString(a.name,b.name), multiple: 3},\n            onFilter: (value:any, record) => record.status.indexOf(value) === 0,\n        },\n    ];\n\n    return (\n        <Table\n            rowKey=\"id\"\n            title={() => <b>{title}</b>}\n            dataSource={data}\n            columns={columns}\n            size={\"small\"}\n        >\n        </Table>\n    )\n\n}","import {gql} from \"@apollo/client\";\n\n\nexport const getEpisodeDetail = gql`\n    query EpisodeDetail($id: ID!){\n        episode(id:$id){\n            id\n            name\n            air_date\n            characters{\n                id\n                name\n                species\n                status\n            }\n        }\n    }`\n\nexport const getEpisodeList = gql`\n    query ($page: Int, $name:String) {\n        episodes (page: $page, filter: { name: $name }) {\n            info {\n                count\n            }\n            results {\n                id\n                name\n                air_date\n            }\n        }\n    }\n`","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Divider, Col, Row} from 'antd'\nimport {useParams} from \"react-router-dom\"\n\nimport CharactersTable from \"../components/CharactersTable\";\nimport {itemErrorIndicator, rickDancingIndicator} from \"../utils/indicators\";\nimport {IDetailQueryVars, IEpisodeData} from \"../store/graphql/interfaces\";\nimport {IEpisode} from \"../store/model/episode/interfaces\";\nimport {getEpisodeDetail} from \"../store/graphql/episode/queries\";\n\n\n\n\n\n\nexport default function EpisodeDetail() {\n    const [episode, setEpisode] = useState<IEpisode>();\n    const {id} = useParams<{ id: string }>()\n\n    const {loading, error, data: apiData} = useQuery<IEpisodeData, IDetailQueryVars>(getEpisodeDetail, {\n        variables: {id: id}\n    });\n\n    useEffect(() => {\n        if (apiData?.episode) {\n            setEpisode(apiData.episode);\n        }\n\n    }, [apiData]);\n\n\n    if (error) return itemErrorIndicator\n\n    if (loading || !episode) return rickDancingIndicator\n\n\n    return (\n        <>\n            <h1 className=\"headings-2 text-center\">Location</h1>\n            <Divider/>\n            <div className=\"text-center\">\n                <span className=\"description-main\">{episode.name}</span>\n                <br/>\n                <span className=\"description\">Air date: {episode.air_date}</span>\n            </div>\n            <Row>\n                <Col span={24} style={{marginTop: \"40px\"}}>\n                    <CharactersTable title=\"Characters\" data={episode.characters}/>\n                </Col>\n            </Row>\n        </>\n    )\n\n\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Table} from 'antd'\nimport {ricksHeadIndicator} from \"../utils/indicators\";\nimport {getPaginationSettings} from \"../utils/componentSetting\"\nimport {Link} from 'react-router-dom'\nimport SearchInput from \"../components/SearchInput\";\nimport {IEpisodeListData, IListQueryVars} from \"../store/graphql/interfaces\";\nimport {IEpisode} from \"../store/model/episode/interfaces\";\nimport {getEpisodeList} from \"../store/graphql/episode/queries\";\n\nfunction EpisodeList() {\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [episodes, setEpisodes] = useState<IEpisode[]>([]);\n    const [totalPagesNumber, setTotalPagesNumber] = useState<number>(0)\n    const [filterName, setFilterName] = useState<string>(\"\")\n\n    const {loading, error, data: apiData} = useQuery<IEpisodeListData, IListQueryVars>(getEpisodeList, {\n        variables: {page: currentPage, name: filterName}\n    });\n\n    useEffect(() => {\n        if (apiData?.episodes) {\n            console.log(apiData)\n            setEpisodes(apiData.episodes.results);\n            setTotalPagesNumber(apiData.episodes.info.count)\n        }\n\n    }, [apiData]);\n\n    function handleSearch(input:string):void{\n        setFilterName(input)\n    }\n\n    const columns= [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            render: (text: string, record:IEpisode) => <Link to={\"/episode/\" + record.id}>{record.name}</Link>,\n        },\n        {\n            title: \"Air date\",\n            dataIndex: \"air_date\"\n\n        }\n    ];\n\n    return(\n        <>\n            <h1 className=\"headings-2\">Episodes</h1>\n            <SearchInput onSearch={handleSearch} error={error}/>\n            <Table rowKey=\"id\" size={\"small\"} loading={!error && loading && {indicator: ricksHeadIndicator}}\n                   pagination={getPaginationSettings(currentPage, (page: number) => setCurrentPage(page), totalPagesNumber)}\n                   dataSource={episodes} columns={columns}/>;\n        </>\n    )\n\n}\n\nexport default EpisodeList;\n","import {gql} from \"@apollo/client\";\n\n\nexport const getLocationDetail = gql`\n    query LocationDetail($id: ID!){\n        location(id:$id){\n            id\n            name\n            type\n            dimension\n            residents{\n                id\n                name\n                status\n                species\n            }\n        }\n    }`\n\nexport const getLocationList = gql`\n    query ($page: Int!) {\n        locations (page: $page) {\n            info {\n                count\n            }\n            results {\n                id\n                name\n                type\n                dimension\n            }\n        }\n    }`","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Table} from 'antd'\nimport {ricksHeadIndicator} from \"../utils/indicators\";\nimport {getPaginationSettings} from \"../utils/componentSetting\"\nimport {Link} from 'react-router-dom'\nimport SearchInput from \"../components/SearchInput\";\nimport {IListQueryVars, ILocationListData} from \"../store/graphql/interfaces\";\nimport {ILocation} from \"../store/model/location/interfaces\";\nimport {getLocationList} from \"../store/graphql/location/queries\";\n\n\nfunction LocationList() {\n    const [currentPage, setCurrentPage] = useState<number>(1)\n    const [locations, setLocations] = useState<ILocation[]>([]);\n    const [totalPagesNumber, setTotalPagesNumber] = useState<number>(0)\n    const [filterName, setFilterName] = useState<string>(\"\")\n\n    const {loading, error, data: apiData} = useQuery<ILocationListData, IListQueryVars>(getLocationList, {\n        variables: {page: currentPage, name: filterName}\n    });\n\n    useEffect(() => {\n        if (apiData?.locations) {\n            setLocations(apiData.locations.results);\n            setTotalPagesNumber(apiData.locations.info.count)\n        }\n\n    }, [apiData]);\n\n    function handleSearch(input:string):void{\n        setFilterName(input)\n    }\n\n\n    const columns= [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            render: (text: string, record:ILocation) => <Link to={\"/location/\" + record.id}>{record.name}</Link>,\n        },\n                {\n            title: 'Type',\n            dataIndex: 'type',\n        },\n                {\n            title: 'Dimension',\n            dataIndex: 'dimension',\n        }\n    ];\n\n    return(\n        <>\n            <h1 className=\"headings-2\">Episodes</h1>\n            <SearchInput onSearch={handleSearch} error={error}/>\n            <Table rowKey=\"id\" size={\"small\"} loading={loading && {indicator: ricksHeadIndicator}}\n                  pagination={getPaginationSettings(currentPage, (page: number) => setCurrentPage(page), totalPagesNumber)}\n                  dataSource={locations} columns={columns}/>\n        </>)\n\n}\n\nexport default LocationList;\n","import React, {useState, useEffect} from 'react';\nimport {useQuery} from '@apollo/client';\nimport {Divider, Col, Row} from 'antd'\nimport {useParams} from \"react-router-dom\"\nimport CharactersTable from \"../components/CharactersTable\";\nimport { rickDancingIndicator, itemErrorIndicator} from \"../utils/indicators\";\nimport {IDetailQueryVars, ILocationData} from \"../store/graphql/interfaces\";\nimport {ILocation} from \"../store/model/location/interfaces\";\nimport {getLocationDetail} from \"../store/graphql/location/queries\";\n\n\nexport default function LocationDetail() {\n    const [location, setLocation] = useState<ILocation>();\n\n    const {id} = useParams<{id:string}>()\n\n    const {loading, error, data: apiData} = useQuery<ILocationData, IDetailQueryVars>(getLocationDetail, {\n        variables: {id: id}\n    });\n\n    useEffect(() => {\n        if (apiData?.location) {\n            setLocation(apiData.location);\n        }\n\n    }, [apiData]);\n\n\n    if (error) return itemErrorIndicator\n\n    if (loading || !location) return rickDancingIndicator\n\n\n     return (\n         <>\n             <h1 className=\"headings-2 text-center\">Location</h1>\n            <Divider/>\n             <div className=\"text-center\">\n             <h2 className=\"description-main\">{location.name}</h2>\n             <Row><Col span={12}><span className=\"description\">Type: {location.type}</span></Col><Col span={12}><span className=\"description\">Dimension: {location.dimension}</span></Col></Row>\n             </div>\n        <Row >\n            <Col span={24} style={{marginTop: \"40px\"}}>\n                <CharactersTable title=\"Residents\" data={location.residents}/>\n            </Col>\n\n        </Row>\n         </>\n    )\n\n\n\n}\n\n","import React, {useEffect, useState} from 'react';\nimport {Menu} from 'antd'\nimport {useLocation} from \"react-router-dom\"\nimport {Link} from \"react-router-dom\"\n\nexport default function Navbar() {\n    const location = useLocation<Location>()\n    const [item, setItem] = useState<string>(\"\")\n\n    useEffect(() => {\n        const path: string = location.pathname\n        if(path.includes(\"episode\")) setItem(\"1\")\n        else if (path.includes(\"character\")) setItem(\"2\")\n        else if (path.includes(\"location\")) setItem(\"3\")\n        else setItem(\"\")\n\n    }, [location]);\n\n\n\n    return (\n        <>\n          <span><Link to=\"/\" className=\"header-main\">Rick and Morty API Explorer</Link></span>\n          <Menu theme=\"dark\" mode=\"horizontal\" style={{fontSize: \"15px\"}} selectedKeys={[item]}>\n              <Menu.Item key=\"1\"><Link to=\"/episode\">Episodes</Link></Menu.Item>\n              <Menu.Item key=\"2\"><Link to=\"/character\">Characters</Link></Menu.Item>\n              <Menu.Item key=\"3\"><Link to=\"/location\">Locations</Link></Menu.Item>\n          </Menu>\n        </>\n    )\n\n\n\n}\n\n","import React from 'react';\nimport {Col, Row, Card} from 'antd'\nimport {useHistory} from \"react-router-dom\";\n\n\nexport default function Home() {\n    const history = useHistory();\n\n    function handleCardClick(target: string) {\n        history.push(\"/\" + target)\n    }\n\n    return (\n        <div className=\"text-center\">\n            <Row><Col span={24}><h1 className=\"headings-1\">Welcome to Rick and Morty API Explorer!!</h1></Col></Row>\n            <img src={require(\"../assets/images/home.png\").default} height=\"300\" width=\"500\" alt=\"Rick and Morty\"/>\n            <Row style={{marginTop: \"25px\", marginBottom: \"25px\"}}><Col span={24}><h2 className=\"headings-2\">Are you\n                dare to explore?</h2></Col></Row>\n            <Row>\n                <Col md={8} sm={24}>\n                    <Card onClick={() => handleCardClick(\"episode\")} hoverable className=\"card-home\"\n                          cover={<img alt=\"example\" width=\"240\" height=\"360\"\n                                      src={require(\"../assets/images/hologramRick.jpeg\").default}/>}>\n                        <Card.Meta title=\"Episodes\"/>\n                    </Card>\n                </Col>\n                <Col md={8} sm={24}>\n                    <Card onClick={() => handleCardClick(\"character\")} hoverable className=\"card-home\"\n                          cover={<img alt=\"example\" height=\"360\"\n                                      src={require(\"../assets/images/characters.jpeg\").default}/>}>\n                        <Card.Meta title=\"Characters\"/>\n                    </Card>\n                </Col>\n                <Col md={8} sm={24}>\n                    <Card onClick={() => handleCardClick(\"location\")} hoverable className=\"card-home\"\n                          cover={<img alt=\"example\" width=\"240\" height=\"360\"\n                                      src={require(\"../assets/images/planeLocation.jpeg\").default}/>}>\n                        <Card.Meta title=\"Locations\"/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport { Breadcrumb} from 'antd'\nimport {useLocation} from \"react-router-dom\"\nimport {Link} from \"react-router-dom\"\n//naive implementation\nexport default function Breadcrumbs({routes} : {routes:{name: string, text:string}[]}) {\n    const location = useLocation<Location>()\n\n    const route = routes.find(item => location.pathname.includes(item.name))\n\n    if (!route) return <></>\n\n    const regex: RegExp = new RegExp(\"^/\" + route.name + \"/\\\\d+$\")\n\n    return (\n            <Breadcrumb>\n                <Breadcrumb.Item ><Link to=\"/\">Home</Link></Breadcrumb.Item>\n                <Breadcrumb.Item><Link to={\"/\" + route.name} style={{fontWeight: regex.test(location.pathname) ? \"normal\" : \"bold\"}}>List</Link></Breadcrumb.Item>\n                {regex.test(location.pathname) && <Breadcrumb.Item><b>{route.text}</b></Breadcrumb.Item>}\n            </Breadcrumb>\n    )\n\n\n\n}\n\n","import React from 'react';\nimport './assets/css/App.css';\nimport CharacterList from \"./views/CharacterList\"\nimport CharacterDetail from \"./views/CharacterDetail\"\nimport EpisodeDetail from \"./views/EpisodeDetail\"\nimport EpisodeList from \"./views/EpisodeList\"\nimport LocationList from \"./views/LocationList\"\nimport LocationDetail from \"./views/LocationDetail\"\nimport Navbar from \"./components/Navbar\"\nimport Home from \"./views/Home\"\nimport {Layout} from 'antd';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Breadcrumbs from \"./components/Breadcrumbs\";\nconst { Header, Footer, Content} = Layout;\n\n\n\nconst routes: {name: string, text:string}[]= [{name: \"character\", text: \"Character\"}, {name: \"episode\", text: \"Episode\"}, {name: \"location\", text: \"Location\"}]\n\n\nfunction App() {\n\n  return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Layout className=\"Layout\">\n                <Header>\n                    <Navbar/>\n                </Header>\n                <Content className=\"main-content\"  style={{ padding: '0 100px' }}>\n                    <div style={{ margin: '16px 0' }}>\n                        <Breadcrumbs routes={routes} />\n                    </div>\n                    <div className=\"site-layout-content\">\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Home/>\n                            </Route>\n                            <Route exact path=\"/character\">\n                                <CharacterList/>\n                            </Route>\n                            <Route exact path=\"/character/:id\">\n                                <CharacterDetail/>\n                            </Route>\n                            <Route exact path=\"/episode\">\n                                <EpisodeList/>\n                            </Route>\n                            <Route exact path=\"/episode/:id\">\n                                <EpisodeDetail/>\n                            </Route>\n                            <Route exact path=\"/location\">\n                                <LocationList/>\n                            </Route>\n                            <Route exact path=\"/location/:id\">\n                                <LocationDetail/>\n                            </Route>\n                            <Route path='*' exact>\n                                <p>Page does not exists!</p>\n                            </Route>\n                        </Switch>\n                    </div>\n                </Content>\n                <Footer className=\"text-center\">How dare you!</Footer>\n            </Layout>\n      </BrowserRouter>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ApolloClient, InMemoryCache} from \"@apollo/client\";\n\nexport const client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client/react';\nimport {client} from './client'\nimport 'antd/dist/antd.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}